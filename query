// Query to detect file sharing platforms (e.g., uTorrent, BitTorrent) using Defender ATP

DeviceFileEvents
| where FolderPath contains "\\AppData\\Roaming\\uTorrent\\" or
        FolderPath contains "\\AppData\\Roaming\\BitTorrent\\" or
        FolderPath contains "\\AppData\\Local\\BitTorrent\\" or
        FolderPath contains "\\AppData\\Local\\uTorrent\\"
| project Timestamp, ActionType, FileName, FolderPath, InitiatingProcessFileName, InitiatingProcessCommandLine


SigninLogs
| where TimeGenerated >= ago(90d)
| summarize LastSignIn = max(TimeGenerated) by UserId
| join kind=leftouter (
    AuditLogs
    | where OperationName == "PasswordReset"
) on UserId
| where LastSignIn < ago(90d) and isnull(OperationName)
| project UserId, LastSignIn, UserPrincipalName


// Sentinel query to track file writes to USB drives

DeviceFileEvents
| where ActionType == "Write"  // Filter for file write actions
| where DeviceType == "RemovableDisk"  // Filter for removable disks (USB drives)
| project Timestamp, ActionType, FileName, FolderPath, InitiatingProcessFileName, InitiatingProcessCommandLine, DeviceName

--0
DeviceRegistryEvents
| where RegistryValueName matches regex @"password|pass|pwd|credential"
| where ActionType == "RegistryValueSet" or ActionType == "RegistryValueModified"
| project Timestamp, DeviceName, RegistryKey, RegistryValueName, RegistryValueData



# Start by searching for file write events
@fields timestamp, hostname, filepath, filename, user, process
@rawstring "*password*" OR "*credentials*" OR "*creds*" OR "*passwd*" OR "*pass*" OR "*pwd*"

# Filter for specific file actions
| where event_type in ["file_write", "file_create", "file_modify"]

# Include additional context fields
| select timestamp, hostname, filepath, filename, user, process
| sort timestamp desc


// Search for potential plaintext credentials in file names
SecurityEvent
| where EventID == 4663  // File access event
| where ObjectType == "File"
| where ObjectName has_any("password", "credentials", "creds", "passwd", "pass", "pwd")
| project TimeGenerated, Computer, ObjectName, SubjectUserName, EventData

// Combine with a search for potential plaintext credentials in file contents
| union (
    SecurityEvent
    | where EventID == 4663  // File access event
    | where ObjectType == "File"
    | extend FileContent = extract(@"\b(password|credentials|creds|passwd|pass|pwd)\b", 0, AdditionalEventData)
    | where isnotempty(FileContent)
    | project TimeGenerated, Computer, ObjectName, SubjectUserName, EventData, FileContent
)
| sort by TimeGenerated desc


// Search for SSH configuration changes indicating PermitRootLogin
Syslog
| where Facility == "auth" or Facility == "authpriv"
| where SyslogMessage has "PermitRootLogin"
| extend PermitRootLoginStatus = extract("PermitRootLogin\s+(\w+)", 1, SyslogMessage)
| where PermitRootLoginStatus == "yes"
| project TimeGenerated, HostName, SyslogMessage, PermitRootLoginStatus
| sort by TimeGenerated desc

# Search for SSH configuration changes or settings indicating PermitRootLogin
@rawstring("PermitRootLogin")
| where @rawstring contains "PermitRootLogin"
| parse @rawstring /PermitRootLogin\s+(?<PermitRootLoginStatus>\w+)/
| where PermitRootLoginStatus == "yes"
| select timestamp, hostname, @rawstring, PermitRootLoginStatus
| sort by timestamp desc

# Search for log entries related to group memberships
@rawstring("root")
| where @rawstring contains "root"
| parse @rawstring /(\S+)\s+root\s+(?<GroupUsers>.+)/
| let GroupUsersArray = split(GroupUsers, ",")
| let NonRootUsers = filter(GroupUsersArray, u -> u != "root")
| select timestamp, hostname, NonRootUsers
| sort by timestamp desc




